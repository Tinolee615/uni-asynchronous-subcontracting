diff --git a/node_modules/@dcloudio/uni-mp-vite/dist/plugins/usingComponents.js b/node_modules/@dcloudio/uni-mp-vite/dist/plugins/usingComponents.js
index 03a63ee..0ee64cf 100644
--- a/node_modules/@dcloudio/uni-mp-vite/dist/plugins/usingComponents.js
+++ b/node_modules/@dcloudio/uni-mp-vite/dist/plugins/usingComponents.js
@@ -7,6 +7,51 @@ exports.dynamicImport = exports.uniUsingComponentsPlugin = void 0;
 const path_1 = __importDefault(require("path"));
 const uni_cli_shared_1 = require("@dcloudio/uni-cli-shared");
 const entry_1 = require("./entry");
+const parser = require('@babel/parser')
+const t = require('@babel/types')
+const babelGenerate = require('@babel/generator').default
+
+function getCode (node) {
+  return babelGenerate(t.cloneDeep(node), {
+    compact: 'auto',
+    jsescOption: {
+      quotes: 'single',
+      minimal: true
+    }
+  }).code
+}
+function getBabelParserOptions () {
+    return {
+        sourceType: 'module',
+        plugins: [
+            'optionalChaining',
+            'typescript',
+            ['decorators', {
+                decoratorsBeforeExport: true
+            }],
+            'classProperties'
+        ]
+    }
+}
+function handleObjectExpression(asyncCustomComponents) {
+    const properties = asyncCustomComponents.value.properties
+    let list = ''
+    const componentNames = []
+    properties.forEach(_ => {
+        const name = _.key.value.replace(/\-(\w)/g, function(all, letter){
+        return letter.toUpperCase();
+        })
+        const value = _.value.value
+        const asyncCustomComponentsToImport = `import ${name} from '${'@' + value}';`
+        list += asyncCustomComponentsToImport
+        componentNames.push(name)
+    })
+    return {
+        componentNames,
+        list,
+    }
+}
+
 function uniUsingComponentsPlugin(options = {}) {
     const normalizeComponentName = options.normalizeComponentName || ((name) => name);
     const parseAst = (source, id) => {
@@ -66,7 +111,42 @@ function uniUsingComponentsPlugin(options = {}) {
             if (!uni_cli_shared_1.EXTNAME_VUE.includes(path_1.default.extname(filename))) {
                 return null;
             }
-            const ast = parseAst(source, id);
+            let ast = parseAst(source, id);
+            if(source.includes('asyncCustomComponents')) {
+                const constNodes = ast.body.filter(_ => _.type === 'VariableDeclaration' && _.kind === 'const')
+                let asyncCustomComponents = ''
+                let components = ''
+                constNodes.forEach(_ => {
+                    (_.declarations || []).forEach(__ => {
+                        if(__.init.type === 'ObjectExpression') {
+                            __.init.properties.forEach(proper => {
+                                if(proper.key.name === 'asyncCustomComponents') {
+                                    asyncCustomComponents = proper
+                                }
+                                if(proper.key.name === 'components') {
+                                    components = proper
+                                }
+                            })
+                        }
+                    })
+                })
+                const contentObj = {}
+                const {
+                    componentNames,
+                    list,
+                } = handleObjectExpression(asyncCustomComponents)
+
+                const importNodes = parser.parse(list, getBabelParserOptions()).program.body
+                const idx = ast.body.findIndex(_ => _.type === 'ImportDeclaration')
+                ast.body.splice(idx + 1, 0, ...importNodes)
+                const componentsNodes = componentNames.map(_ => {
+                    return parser.parse(_, getBabelParserOptions()).program.body[0].expression
+                })
+                components.value.properties.splice(0, 0, ...componentsNodes)
+
+                source = getCode(ast)
+                ast = parseAst(source, id);
+            }
             const descriptor = await (0, uni_cli_shared_1.parseMainDescriptor)(filename, ast, resolve);
             (0, uni_cli_shared_1.updateMiniProgramComponentsByMainFilename)(filename, inputDir, normalizeComponentName);
             return (0, uni_cli_shared_1.transformDynamicImports)(source, descriptor.imports, dynamicImportOptions);
